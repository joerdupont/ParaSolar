from pyfirmata import Arduino,util
import time
import random
import numpy as np
import pickle
# board = pyfirmata.Arduino('COM3')

class house:
    def _init_(self):
        self.supply = 'main Generator'
        self.price = 0
        self.state = 'seller'
        self.firstrelay = 0
        self.secondrelay = 0
        self.load = 100
        self.bankaccount = 5000
        self.list_events = []
    
        
    def connect_to_solar(self):
            first_relay_to_change = self.firstrelay
            second_relay_to_change = self.secondrelay
            board.digital[first_relay_to_change].write(0)   #turns the first relay on
            board.digital[second_relay_to_change].write(0)  #turns the second relay on  
            self.supply = 'own battery'
            
    def connect_to_main(self):
            first_relay_to_change = self.firstrelay
            second_relay_to_change = self.secondrelay
            board.digital[first_relay_to_change].write(1)   #turns the first relay off
            board.digital[second_relay_to_change].write(1)  #turns the second relay off 
            self.supply = 'main generator'
            
    def connect_to_other_house(self):
            first_relay_to_change = self.firstrelay
            second_relay_to_change = self.secondrelay
            board.digital[first_relay_to_change].write(0)   #turns the first relay on
            board.digital[second_relay_to_change].write(1)  #turns the second relay off  
            self.supply = 'exchange'
            
    def price_comparison():
        liste = [house1,house2,house3,house4]
        a = liste[0].price
        k = 0
        for i in range(1, len(liste)):
                if liste[i]>a:
                    a = liste[i]
                    k = i
        return(liste[k])  
        
                    
                    
    def connect_2_houses(self,other):
        self.connect_to_other_house
        other.connect_to_other_house
    
    def add_event(self, event):
        self.list_events.append(event)
        
    def compute_price(self):
        self.price = - self.load*0.10 +11
        
        
        
house1 = house()
house1.supply = 'own battery'
house1.price = 0
house1.state = 'seller'
house1.firstrelay = 7
house1.secondrelay = 8
house1.load = 100
house1.bankaccount = 5000
house1.list_events = []

    
house2 = house()
house2.supply = 'own battery'
house2.price = 0
house2.state = 'seller'
house2.firstrelay = 5
house2.secondrelay = 6
house2.load = 90
house2.bankaccount = 5000
house2.list_events = []

    
house3 = house()
house3.supply = 'own battery'
house3.price = 50
house3.state = 'buyer'
house3.firstrelay = 3
house3.secondrelay = 4
house3.load = 25  
house3.bankaccount = 5000
house3.list_events = []
    
house4 = house()
house4.supply = 'own battery'
house4.price = 100
house4.state = 'buyer'
house4.firstrelay = 1
house4.secondrelay = 2
house4.load = 0 
house4.bankaccount = 5000
house4.list_events = []


        
        
class Event:
    def _init_(self):
        self.time = 0   #time in minutes
        self.house = 'house1'
        self.load_usage = 4    #usage of load in percentages of battery
        
    def define_event_random(self, house):
        self.time = random.randint(0, 1080)
        self.house = house
        self.load_usage = random.randint(1,50)

event1 = Event() 
event1.time = 20
event1.house = 'house1'
event1.load_usage = 20

event2 = Event() 
event2.time = 200
event2.house = 'house1'
event2.load_usage = 30

event3 = Event() 
event3.time = 800
event3.house = 'house1'
event3.load_usage = 50

event4 = Event() 
event4.time = 300
event4.house = 'house2'
event4.load_usage = 34

event5 = Event() 
event5.time = 150
event5.house = 'house2'
event5.load_usage = 45

event6 = Event() 
event6.time = 1000
event6.house = 'house2'
event6.load_usage = 12

event7 = Event()
event7.time = 760
event7.house = 'house3'
event7.load_usage = 5

event8 = Event() 
event8.time = 900
event8.house = 'house3'
event8.load_usage = 3

event9 = Event() 
event9.time = 600
event9.house = 'house3'
event9.load_usage = 25 

event10= Event()
event10.time = 550
event10.house = 'house4'
event10.load_usage = 5

event11 = Event() 
event11.time = 900
event11.house = 'house4'
event11.load_usage = 3

event12 = Event() 
event12.time = 600
event12.house = 'house4'
event12.load_usage = 25 

house1.add_event(event1)
house1.add_event(event2)
house1.add_event(event3)

house2.add_event(event4)
house2.add_event(event5)
house2.add_event(event6)

house3.add_event(event7)
house3.add_event(event8)
house3.add_event(event9)

house4.add_event(event10)
house4.add_event(event11)
house4.add_event(event12)

# for i in range (0,3):
#     random.seed(3000)
#     event.define_event_random("house1")
#     house1.add_event(event)


# for i in range (4,7):
#     random.seed(9999)
#     event.define_event_random("house2")
#     house2.add_event(event)

# for i in range (8,11):
#     random.seed(i*1000)
#     event.define_event_random("house3")
#     house3.add_event(event)
    
# for i in range (11,14):
#     random.seed(i*1000)
#     event.define_event_random("house4")
#     house4.add_event(event)    


solar = 30
price_main_generator = 5



class dispatcher:
    def _init_(self):
        self.dispatcher = []
    
    def add_events_from_lists(self, list_event):
        for i in range (0,len(list_event)):
            self.dispatcher.append(list_event[i])
            self.dispatcher.sort(key=lambda x: x.time, reverse=False)
            
    def run_dispatcher(self): 
        house1.load += self.dispatcher[0].time * solar
        house2.load += self.dispatcher[0].time * solar         #we compute how much solar energy we gained from the time before the event
        house3.load += self.dispatcher[0].time * solar
        house4.load += self.dispatcher[0].time * solar
        string = self.dispatcher[0].house
        if string[5] == '1':
            house_event = house1
        if string[5] == '2':
            house_event = house2 
        if string[5] == '3':                             #we want to find which house is having the event
            house_event = house3 
        if string[5] == '4':
            house_event = house4     
        list_houses = [house1, house2 , house3, house4]
        list_houses.remove(house_event.encode('utf-8'))
        if self.dispatcher[0].load_usage < house_event.load:               #we use the battery if we have enough power
            house_event.load += - self.dispatcher[0].load_usage
        else:
            for i in range(0, len(list_houses)):
                if list_houses[i].load<self.dispatcher[0].load_usage:   #if not we compute a list of houses having enough load and their prices
                    list_houses.remove(list_houses[i])
            for i in range(0, len(list_houses)):
                list_houses[i].compute_price
            list_houses.sort(key=lambda x: x.price)                        #we sort them by price
            if list_houses[0].price < main_generator_price:
                if house_event.bankaccount> main_generator_price*self.dispatcher[0].load_usage:
                    house_event.bankaccount += - main_generator_price*self.dispatcher[0].load_usage    #we use the main if its cheaper
                    house_event.connect_to_main
            else: 
                if house_event.bankaccount> list_houses[0].price*self.dispatcher[0].load_usage:
                    house_event.bankaccount += - list_houses[0].price*self.dispatcher[0].load_usage     #otherwise we connect 2 houses
                    list_houses[0].bankaccount += list_houses[0].price*self.dispatcher[0].load_usage
                    list_houses[0].load += - self.dispatcher[0].load_usage
                    house_event.connect_2_houses(list_houses[0])
                    
                    
                
                    
                    
                    

    

                
            
            
                
                
                
            
            
            


                
            
            
            
    
            
        
# dispatcher1 = dispatcher() 
# dispatcher1.dispatcher = []

# dispatcher1.add_events_from_lists(house1.list_events)
# dispatcher1.add_events_from_lists(house2.list_events)
# dispatcher1.add_events_from_lists(house3.list_events)
# dispatcher1.add_events_from_lists(house4.list_events)

# for i in range (0, len(dispatcher1.dispatcher)):
#     print(dispatcher1.dispatcher[i].time)
